/******************************************************************************
 *
 * Copyright (c) 2017, Synopsys, Inc.
 *
 *
 *
 */
/*! \page page_device Device
\tableofcontents
\section sect_device_introduction Introduction

The device folder in the root of embARC contains the necessary software APIs and implementations for common device IP. The device layer consists of the following components:
- <b>Device HAL</b>: a device hardware abstraction layer including WNIC (Wireless Network Interface Controller), UART (Universal Asynchronous Receiver/Transmitter), SPI (Serial Peripheral Interface), IIC (Inter-Integrated Circuit), and GPIO (General Purpose Input Output).
- <b>Implementation</b>: device driver implementations based on the above device HAL, including WNIC implementation of Microchip MRF24G WiFi device and DesignWare IP implementations of UART, IIC, SPI, and GPIO devices.

\htmlonly
<div class="imagebox">
    <div style="width: 700px">
        <img src="pic/embARC_device_hal.jpg" alt="embARC Device Hardware Abstraction Layer"/>
        <p>embARC Device Hardware Abstraction Layer</p>
    </div>
</div>
\endhtmlonly
\image latex pic/embARC_device_hal.jpg "embARC Device Hardware Abstraction Layer" width=12cm

\section sect_device_devicehal Device HAL

The Device HAL provides abstraction for the following devices:
- <b>GPIO</b>: GPIO device abstraction in dev_gpio.h
- <b>I2C</b>: I2C device abstraction in dev_iic.h
- <b>SPI</b>: SPI device abstraction in dev_spi.h
- <b>UART</b>: UART device abstraction in dev_uart.h
- <b>WNIC</b>: WINC device abstraction in dev_wnic.h


These *.h files provide abstraction APIs and macros that require corresponding implementations. embARC provides the device implementations in <b>device/designware</b>, <b>device/microchip</b>, <b>device/rtthread</b> and <b>board/emsk/drivers</b>.  \n
Different device features are abstracted in the device HAL, such as UART, IIC, and SPI. Object-oriented concepts are adopted to provide common device operation APIs and device access APIs. See the section for each device for detailed information of the device HAL.

\section sect_device_implemented_drivers_in_embARC Device Drivers in embARC Software Package

The files relevant to supported devices in the <b>embARC Software Package</b> are described in the table below:

|      Source Code Folder             |                    Comments                           |
| :---------------------------------: | :---------------------------------------------------: |
|  board/emsk/drivers                 |    Peripheral driver implementations for EMSK devices|
|  device/designware/gpio             |    GPIO HAL implementation for DesignWare GPIO devices |
|  device/designware/iic              |    IIC HAL implementation for DesignWare IIC devices   |
|  device/designware/spi              |    SPI HAL implementation for DesignWare SPI devices  |
|  device/designware/uart             |    UART HAL implementation for DesignWare UART devices |
|  device/device_hal/inc              |    Device HAL definitions for EMSK devices       |
|  device/microchip/mrf24g            |    WNIC HAL implementation for Digilent PMOD WIFI(MRF24WG0MA) |
|  device/rtthread/rw009	      |    WNIC HAL implementation for [RW009 WIFI module](http://item.taobao.com/item.htm?spm=a230r.1.14.12.wgEHPS&id=40813298723&ns=1&abbucket=2#detail) |

See also \ref DEVICE_HAL "Device HAL API"

- \ref DEVICE_HAL_COMMON
- \ref DEVICE_HAL_IIC
- \ref DEVICE_HAL_SPI
- \ref DEVICE_HAL_GPIO
- \ref DEVICE_HAL_UART
- \ref DEVICE_HAL_WNIC

\note The DesignWare UART, IIC, and SPI drivers support both polling mode and interrupt mode.

\section sect_device_add_new_devce_to_embARC Adding New Device to embARC

If the HAL of the new device is defined, follow the steps below:
- Create a subfolder under the device folder.
- Implement the driver according to the device HAL definition and existing DesignWare IP implementations.

If the HAL of the new device is not defined, follow the steps below:
- Create a header file under <b>device/device_hal/folder</b>.
- Add the HAL definition for the new device.
- Implement the driver according to the device HAL definition.

*/
