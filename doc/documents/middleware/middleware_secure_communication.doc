/******************************************************************************
 *
 * Copyright (c) 2017, Synopsys, Inc.
 *
 *
 *
 */
/*! \page page_middleware_secure_communication Secure Communication

\tableofcontents

\anchor EMBARC_MID_IOT_SECURITY_SUPPORT
\section sect_middleware_secure_communication_matrixssl MatrixSSL
    [MatrixSSL](http://www.matrixssl.org) is an embedded SSL and TLS implementation designed for small-footprint applications and devices. A commercial version is also available to license for use in commercial products. MatrixSSL allows secure management of remote devices. Several secure embedded Web servers also use MatrixSSL for their encryption layer.

    embARC supports MatrixSSL in FreeRTOS.

\section sect_middleware_secure_communication_wolfssl wolfSSL
    [wolfSSL](http://www.wolfssl.com/yaSSL/Home.html) (formerly CyaSSL) is a lightweight, portable, C-language-based SSL/TLS library targeted at IoT, embedded, and RTOS environments thanks to its small size, speed, and rich feature set. It also works seamlessly in desktop, enterprise, and cloud environments. wolfSSL supports industry standards up to the current TLS 1.2 and DTLS 1.2. It is up to 20 times smaller than OpenSSL, offers a simple API, an OpenSSL compatibility layer, and OCSP and CRL support. It is backed by the robust wolfCrypt cryptography library.

    embARC supports wolfSSL in FreeRTOS.

\section sect_middleware_secure_communication_mbedtls mbed TLS
    [mbed TLS](https://tls.mbed.org/) (formerly known as PolarSSL) makes it trivially easy for developers to include cryptographic and SSL/TLS capabilities in their (embedded) products, facilitating this functionality with a minimal coding footprint.

    mbed TLS is available as open source under the Apache 2.0 license, the GPL 2.0 license, or under an mbed partnership. The Apache 2.0 license enables you to use mbed TLS in both open source and closed source projects.

    embARC supports mbed TLS in FreeRTOS.

\section sect_middleware_secure_communication_tinydtls TinyDTLS
    [tinydtls](http://projects.eclipse.org/proposals/tinydtls) provides a lightweight implementation of the DTLS protocol that can be used in devices with tight memory constraints, on the order of 100 KiB flash memory and about 10 KiB RAM. The cipher suites supported by tinydtls are limited to TLS_PSK_WITH_AES_128_CCM_8 and TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8, which are mandatory-to-implement for CoAP.

    The library contains an implementation of the Rijndael algorithm (AES) from OpenBSD. The license information is available in the source file rijndael.c. The SHA256 implementation included with tinydtls is licensed under BSD (taken from Aaron D. Gifford). The implementation of the ECC curve secp256r1 was originally developed by Chris K Cockrum and has been put under MIT license. Additional contributions to tinydtls are from Hauke Mehrtens.

    embARC supports tinydtls in Contiki.

\section sect_mid_add_tls_dtls_support_in_embarc Adding TLS/DTLS Support in embARC

Due to export control requirements for United States companies, MatrixSSL, wolfSSL, mbed TLS, and TinyDTLS are not distributed as part of embARC. These packages have been ported and verified for use with embARC. The embARC OSP distribution contains required patches to integrate MatrixSSL, woflssl, mbed TLS, and TinyDTLS into embARC.

Refer to \ref EMBARC_APPLY_PATCHES "Download and apply patches" for detailed information.

*/
